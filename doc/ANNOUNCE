$Header$ -*-text-*-

The netCDF Operators NCO version 4.9.4 have arrived.

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco (Source Code, Issues, Releases, Developers)

What's new?
Version 4.9.4 contains many regridding fixes and features: 

This version adds support for unbuffered I/O that can dramatically
speed-up I/O for large record variables.

Work on NCO 4.9.5 has commenced and will improve NCO weight-generator  
accuracy, reduce vertical interpolation memory use, and supply more
accurate weight generation options for rectangular lat-lon grids.

Work on NCO 5.0.0 has commenced "under the hood". A key leap in that 
release will be support for netCDF4 user-defined types. Printing of
netCDF4 user-defined types ENUM and VLEN is ready now (though
unsupported) with the --udt flag. 5.0.0 will contain the finished
version of that, and include options for invoking mbtempest in place
of tempest. 

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. All operators now support unbuffered I/O with netCDF3 files when 
   invoked with the flag --uio or longer synonyms --unbuffered_io or
   --share_all. This flag invokes the netCDF library NC_SHARE flag
   which enables unbuffered (non-cached) I/O. Unbufferend I/O may
   significantly reduce throughput time when large record variables
   are written or read. Performance improvements may depend on netCDF
   version. Thanks to Barron Henderson for this suggestion.
   ncks       -v T in.nc out.nc # Default, buffered I/O
   ncks --uio -v T in.nc out.nc # Unbuffered I/O
   ncra --uio -v T,Q,U,V in*.nc out.nc
   http://nco.sf.net/nco.html#uio

A. nces now supports the -w (or --wgt) option for per-file weights.
   This option is analogous to the ncra --wgt option, except it
   specifies a per-file weight (or weight-variable name) instead
   of a per-record weight. This is useful when computing statistics  
   of ensembles whose members should be weighted unevenly. Hence
   these three commands produce the same answers, though the second
   and third are much more flexible and can have non-integral weights: 
   nces   1.nc 2.nc 2.nc out.nc
   nces -w 1,2 1.nc 2.nc out.nc
   nces -w var 1.nc 2.nc out.nc
   http://nco.sf.net/nco.html#nces
   http://nco.sf.net/nco.html#xmp_nces

A. ncremap understands new dimensions used in DOE E3SM MPAS BGC
   simulations. ncremap also supports the new --pdq_opt to
   override internal presets and to future-proof itself against
   unexpected new dimensions from any model input.
   ncremap -P mpasseaice --map=map.nc in.nc out.nc
   ncremap --pdq='-a Time,new_dim,nCells' --map=map.nc in.nc out.nc
   Thanks to Ahmed Elshall for reporting the new dimensions.
   http://nco.sf.net/nco.html#pdq_opt

A. ncra now supports the --per_record_weights (or --prw) option to
   utilize command-line weights specified by -w (or --wgt) for
   per-record weights instead of per-file-weights. This is useful when
   computing weighted averages with cyclically varying weights, since
   the weight given on the command line will be repeated for the
   length of the timeseries. Consider, for example, a CMIP6 timeseries
   of historical monthly mean emissions that one wishes to convert to
   an timeseries of annual-mean emissions. One can weight each month
   by its number of days via: 
   ncra --per_record_weights --mro -d time,,,12,12 --wgt \
        31,28,31,30,31,30,31,31,30,31,30,31 ~/monthly.nc ~/annual.nc
   http://nco.sf.net/nco.html#ncra
   http://nco.sf.net/nco.html#per_record_weights

BUG FIXES:

A. ncremap/ncks: Fix vertical interpolation from hybrid-to-hybrid
   files when surface pressure is in vertical grid file.
   This capability worked up to 4.9.1, and was inadvertently broken in
   4.9.2 and 4.9.3. The workaround is to use 4.9.1, or move
   the desired PS field from the gridfile to the input file.
   The solution is to upgrade. Thanks to Wuyin Lin for reporting.

Full release statement at http://nco.sf.net/ANNOUNCE

KNOWN PROBLEMS DUE TO NCO:

   This section of ANNOUNCE reports and reminds users of the
   existence and severity of known, not yet fixed, problems. 
   These problems occur with NCO 4.9.4 built/tested under
   MacOS 10.15.5 with netCDF 4.7.4 on HDF5 1.10.2 and with
   Linux with netCDF 4.8.0-development (2020501) on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

